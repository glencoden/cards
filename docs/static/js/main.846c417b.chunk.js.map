{"version":3,"sources":["js/RequestService.js","js/CardDeck.js","App.js","index.js"],"names":["baseUrl","requestService","url","fetch","then","resp","json","data","Promise","resolve","JSON","stringify","body","method","headers","name","this","_get","id","card","update","_post","CardPriority","CardProbability","cardDeck","_cards","_user","find","prevChance","Object","keys","reduce","result","key","chance","Math","random","priority","username","getUser","user","getAll","reject","curPriority","_getPriority","activeCard","filter","r","e","lastSeenAt","Date","now","curCard","_getCard","resCard","delete","splice","indexOf","parseInt","add","translations","example","push","ActionTypes","initState","cardTurned","reducer","state","action","type","useStyles","makeStyles","theme","root","width","window","innerWidth","height","innerHeight","display","gridTemplateRows","backgroundColor","palette","grey","justifySelf","alignSelf","overflow","cardContent","position","flexDirection","justifyContent","alignItems","fontSize","textAlign","marginTop","cardActions","bottom","rankButton","margin","rbFresh","error","dark","rbHigh","warning","main","rbMedium","success","rbLow","info","light","speedDial","right","editor","padding","editorActions","App","classes","useReducer","dispatch","useState","speedDialOpen","setSpeedDialOpen","stageDelete","setStageDelete","cardForEdit","setCardForEdit","getActiveCard","useCallback","catch","err","console","log","rankCard","event","stopPropagation","useEffect","init","Button","variant","onClick","className","color","deleteCard","Fab","size","from","map","entry","index","TextField","label","value","onChange","prevState","target","fullWidth","to","updateCard","Card","CardContent","values","Typography","CardActions","SpeedDial","ariaLabel","hidden","icon","SpeedDialIcon","onClose","onOpen","open","direction","SpeedDialAction","tooltipTitle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.846c417b.chunk.js","sourcesContent":["// const rootUrl = 'http://localhost';\nconst rootUrl = 'http://192.168.1.3:80';\nconst baseUrl = `${rootUrl}/cards`;\n\n\nclass RequestService {\n    _get(url) {\n        return fetch(url).then(resp => resp.json());\n    }\n\n    _post(url, data) {\n        return Promise.resolve()\n            .then(() => JSON.stringify(data))\n            .then(body => fetch(url, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json; charset=utf-8' },\n                body\n            }))\n            .then(resp => resp.json());\n    }\n\n    getUser(name) {\n        return this._get(`${baseUrl}/user/${name}`);\n    }\n\n    getAll() {\n        return this._get(`${baseUrl}/all`);\n    }\n\n    delete(id) {\n        return this._get(`${baseUrl}/delete/${id}`);\n    }\n\n    add(card) {\n        return this.update(card);\n    }\n\n    update(card) {\n        return this._post(`${baseUrl}/upsert`, card);\n    }\n}\n\nexport const requestService = new RequestService();","import { requestService } from './RequestService';\n\nexport const CardPriority = {\n    FRESH: 'fresh',\n    HIGH: 'high',\n    MEDIUM: 'medium',\n    LOW: 'low'\n};\n\nconst CardProbability = {\n    [CardPriority.FRESH]: 1000,\n    [CardPriority.HIGH]: 3,\n    [CardPriority.MEDIUM]: 2,\n    [CardPriority.LOW]: 1\n};\n\n\nclass CardDeck {\n    _cards = [];\n    _user = '';\n\n    _getCard(id) {\n        return this._cards.find(card => card.id === id);\n    }\n\n    _getPriority() {\n        let prevChance = 0;\n        return Object.keys(CardProbability).reduce((result, key) => {\n            const chance = Math.random() * CardProbability[key];\n            if (chance <= prevChance || !this._cards.find(card => card.priority === key)) {\n                return result;\n            }\n            prevChance = chance;\n            return key;\n        }, '');\n    }\n\n    init(username) {\n        return requestService.getUser(username)\n            .then(resp => {\n                this._user = resp.user;\n                return requestService.getAll()\n            })\n            .then(resp => {\n                this._cards = resp;\n                return this._user;\n            });\n    }\n\n    getActiveCard() {\n        return new Promise((resolve, reject) => {\n            const curPriority = this._getPriority();\n            const activeCard = this._cards\n                .filter(card => card.priority === curPriority)\n                .reduce((r, e) => (r && r.lastSeenAt < e.lastSeenAt) ? r : e, null);\n            if (!activeCard) {\n                reject('no active card');\n                return;\n            }\n            activeCard.lastSeenAt = Date.now();\n            resolve(activeCard);\n        });\n    }\n\n    shuffleCards() {\n        // randomize lastSeenAt from cards.length numbers\n    }\n\n    rankCard(id, priority) {\n        const curCard = this._getCard(id);\n        const resCard = {\n            ...curCard,\n            priority\n        };\n        return requestService.update(resCard)\n            .then(resp => {\n                curCard.priority = resp.priority;\n            });\n\n        // set lastSeen so that card comes first IF priority is set higher (maybe to lastSeen = 0?)\n    }\n\n    deleteCard(id) {\n        return requestService.delete(id)\n            .then(resp => {\n                this._cards.splice(this._cards.indexOf(this._cards.find(card => card.id === parseInt(resp.id, 10))), 1);\n            });\n    }\n\n    updateCard(card) {\n        if (!card.id) {\n            return requestService.add({\n                translations: card.translations,\n                example: card.example,\n                priority: CardPriority.FRESH,\n                lastSeenAt: Date.now()\n            })\n                .then(resp => {\n                    this._cards.push(resp);\n                });\n        }\n        const curCard = this._getCard(card.id);\n        if (!curCard) {\n            return Promise.reject('no card to update');\n        }\n        return requestService.update({\n            ...curCard,\n            translations: {\n                ...curCard.translations,\n                ...card.translations\n            },\n            example: card.example\n        })\n            .then(resp => {\n                curCard.translations = resp.translations;\n                curCard.example = resp.example;\n            });\n    }\n}\n\nexport const cardDeck = new CardDeck();","import { useReducer, useState, useCallback, useEffect } from 'react';\nimport { cardDeck, CardPriority } from './js/CardDeck';\nimport { makeStyles, Card, CardContent, CardActions, Typography, Button, Fab, TextField } from '@material-ui/core';\nimport { SpeedDial, SpeedDialIcon, SpeedDialAction } from '@material-ui/lab';\n\n\n// adapter\n\nconst ActionTypes = {\n    SET_USER: 'set-user',\n    SET_CARD: 'set-card',\n    TURN_CARD: 'turn-card'\n};\n\nconst initState = {\n    user: null,\n    card: null,\n    cardTurned: false\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case ActionTypes.SET_USER:\n            return { ...state, user: action.user };\n        case ActionTypes.SET_CARD:\n            return { ...state, card: action.card, cardTurned: false };\n        case ActionTypes.TURN_CARD:\n            return { ...state, cardTurned: !state.cardTurned };\n        default:\n            return { ...state };\n    }\n};\n\n\n// ui\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: `${window.innerWidth}px`,\n        height: `${window.innerHeight}px`,\n        display: 'grid',\n        gridTemplateRows: 'auto 112px',\n        backgroundColor: theme.palette.grey['100']\n    },\n    card: {\n        width: '330px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n        overflow: 'visible'\n    },\n    cardContent: {\n        position: 'relative',\n        height: '190px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    translations: {\n        fontSize: '24px',\n        textAlign: 'center'\n    },\n    example: {\n        fontSize: '14px',\n        textAlign: 'center',\n        marginTop: '10px'\n    },\n    cardActions: {\n        position: 'absolute',\n        bottom: '-72px',\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    rankButton: {\n        margin: '0 16px'\n    },\n    rbFresh: {\n        backgroundColor: theme.palette.error.dark\n    },\n    rbHigh: {\n        backgroundColor: theme.palette.warning.main\n    },\n    rbMedium: {\n        backgroundColor: theme.palette.success.main\n    },\n    rbLow: {\n        backgroundColor: theme.palette.info.light\n    },\n    speedDial: {\n        position: 'fixed',\n        right: '28px',\n        bottom: '28px'\n    },\n    editor: {\n        padding: '20px',\n        alignSelf: 'center'\n    },\n    editorActions: {\n        width: '210px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n        display: 'flex',\n        justifyContent: 'space-between'\n    }\n}));\n\nfunction App() {\n    const classes = useStyles();\n    const [ state, dispatch ] = useReducer(reducer, initState);\n\n    const [ speedDialOpen, setSpeedDialOpen ] = useState(false);\n    const [ stageDelete, setStageDelete ] = useState(false);\n    const [ cardForEdit, setCardForEdit ] = useState(null);\n\n    const getActiveCard = useCallback(\n        () => {\n            cardDeck.getActiveCard()\n                .then(card => dispatch({ card, type: ActionTypes.SET_CARD }))\n                .catch(err => {\n                    console.log(err);\n                    dispatch({ card: null, type: ActionTypes.SET_CARD })\n                });\n        },\n        [ dispatch ]\n    );\n\n    const rankCard = useCallback(\n        (event, id, priority) => {\n            event.stopPropagation();\n            cardDeck.rankCard(id, priority)\n                .then(getActiveCard);\n        },\n        [ getActiveCard ]\n    );\n\n    useEffect(() => {\n        cardDeck.init('meyer')\n            .then(user => dispatch({ type: ActionTypes.SET_USER, user }))\n            .then(() => cardDeck.getActiveCard())\n            .then(card => dispatch({ card, type: ActionTypes.SET_CARD }))\n            .catch(err => console.log(err));\n    }, [ dispatch ]);\n\n    let cardActions = null;\n\n    if (stageDelete) {\n        cardActions = (\n            <>\n                <Button\n                    key=\"clear\"\n                    variant=\"contained\"\n                    onClick={event => {\n                        event.stopPropagation();\n                        setStageDelete(false);\n                    }}\n                >\n                    <span className=\"material-icons\">clear</span>\n                </Button>\n                <Button\n                    key=\"delete\"\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={e => {\n                        e.stopPropagation();\n                        cardDeck.deleteCard(state.card.id)\n                            .then(() => {\n                                setStageDelete(false);\n                                getActiveCard();\n                            });\n                    }}\n                >\n                    <span className=\"material-icons\">delete</span>\n                </Button>\n            </>\n        );\n    } else if (state.cardTurned) {\n        cardActions = (\n            <>\n                <Fab key=\"rb-fresh\" className={`${classes.rankButton} ${classes.rbFresh}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.FRESH)} />\n                <Fab key=\"rb-high\" className={`${classes.rankButton} ${classes.rbHigh}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.HIGH)} />\n                <Fab key=\"rb-medium\" className={`${classes.rankButton} ${classes.rbMedium}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.MEDIUM)} />\n                <Fab key=\"rb-low\" className={`${classes.rankButton} ${classes.rbLow}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.LOW)} />\n            </>\n        );\n    }\n\n    if (cardForEdit) {\n        return (\n            <div className={classes.root}>\n                <div className={classes.editor}>\n                    {Object.keys(cardForEdit.translations.from).map((entry, index) => (\n                        <TextField\n                            key={index}\n                            id={entry}\n                            label={entry}\n                            margin=\"normal\"\n                            value={cardForEdit.translations.from[entry]}\n                            onChange={event => setCardForEdit(prevState => ({\n                                ...prevState,\n                                translations: {\n                                    ...prevState.translations,\n                                    from: {\n                                        ...prevState.translations.from,\n                                        [entry]: event.target.value\n                                    }\n                                }\n                            }))}\n                            fullWidth\n                        />\n                    ))}\n                    {Object.keys(cardForEdit.translations.to).map((entry, index) => (\n                        <TextField\n                            key={index}\n                            id={entry}\n                            label={entry}\n                            margin=\"normal\"\n                            value={cardForEdit.translations.to[entry]}\n                            onChange={event => setCardForEdit(prevState => ({\n                                ...prevState,\n                                translations: {\n                                    ...prevState.translations,\n                                    to: {\n                                        ...prevState.translations.to,\n                                        [entry]: event.target.value\n                                    }\n                                }\n                            }))}\n                            fullWidth\n                        />\n                    ))}\n                    <TextField\n                        id=\"example\"\n                        label=\"Beispiel\"\n                        margin=\"normal\"\n                        value={cardForEdit.example}\n                        onChange={event => setCardForEdit(prevState => ({\n                            ...prevState,\n                            example: event.target.value\n                        }))}\n                        fullWidth\n                    />\n                </div>\n                <div className={classes.editorActions}>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => setCardForEdit(null)}\n                    >\n                        Abbrechen\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            cardDeck.updateCard(cardForEdit)\n                                .then(() => {\n                                    getActiveCard();\n                                    setCardForEdit(null);\n                                })\n                        }}\n                    >\n                        Fertig\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    console.log('APP', state.card);// TODO remove dev code\n\n    return (\n        <div className={classes.root}>\n            <Card\n                className={classes.card}\n                onClick={() => dispatch({ type: ActionTypes.TURN_CARD })}\n            >\n                {state.card && (\n                    <CardContent className={classes.cardContent}>\n                        {Object.values(state.cardTurned ? state.card.translations.to : state.card.translations.from).map((entry, index) => {\n                            if (!entry) {\n                                return null;\n                            }\n                            return (\n                                <Typography\n                                    key={index}\n                                    className={classes.translations}\n                                    variant=\"subtitle2\"\n                                >\n                                    {entry}\n                                </Typography>\n                            );\n                        })}\n                        {state.cardTurned && state.card.example && (\n                            <Typography\n                                className={classes.example}\n                                variant=\"caption\"\n                            >\n                                {state.card.example}\n                            </Typography>\n                        )}\n                        <CardActions className={classes.cardActions}>\n                            {cardActions}\n                        </CardActions>\n                    </CardContent>\n                )}\n            </Card>\n\n            <SpeedDial\n                className={classes.speedDial}\n                ariaLabel=\"SpeedDial\"\n                hidden={false}\n                icon={<SpeedDialIcon/>}\n                onClose={() => setSpeedDialOpen(false)}\n                onOpen={() => setSpeedDialOpen(true)}\n                open={speedDialOpen}\n                direction=\"up\"\n            >\n                <SpeedDialAction\n                    icon={<span className=\"material-icons\">add</span>}\n                    tooltipTitle=\"Neu\"\n                    onClick={() => {\n                        setCardForEdit({\n                            translations: {\n                                from: state.user.from.reduce((r, e) => ({ ...r, [e]: '' }), {}),\n                                to: state.user.to.reduce((r, e) => ({ ...r, [e]: '' }), {})\n                            },\n                            example: ''\n                        });\n                        setSpeedDialOpen(false);\n                    }}\n                />\n                <SpeedDialAction\n                    icon={<span className=\"material-icons\">edit</span>}\n                    tooltipTitle=\"Bearbeiten\"\n                    onClick={() => {\n                        if (state.card) {\n                            setCardForEdit(state.card);\n                        }\n                        setSpeedDialOpen(false);\n                    }}\n                />\n                <SpeedDialAction\n                    icon={<span className=\"material-icons\">delete</span>}\n                    tooltipTitle=\"Löschen\"\n                    onClick={() => {\n                        if (state.card) {\n                            setStageDelete(true);\n                        }\n                        setSpeedDialOpen(false);\n                    }}\n                />\n            </SpeedDial>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}