{"version":3,"sources":["js/RequestService.js","js/CardDeck.js","App.js","index.js"],"names":["baseUrl","requestService","url","fetch","then","resp","json","data","Promise","resolve","JSON","stringify","body","method","headers","name","this","_get","username","id","card","update","_post","CardPriority","FRESH","HIGH","MEDIUM","LOW","CardProbability","cardDeck","_user","_cards","_numCardsSeen","getUser","user","Error","_setUser","getAll","_setCards","reject","length","activeCard","_getCard","cards","mostRecentCard","threshold","reduce","result","curThreshold","Math","floor","priority","lastSeenAt","random","getCardId","age","Date","now","hour","minute","day","ageDays","ageHours","ageMinutes","spec","cardPosition","indexOf","timeShowToRanking","timeSinceLastSeen","priorityDistribution","Object","values","filter","_sortCards","map","translations","from","searchItem","find","console","warn","add","example","_addCard","curCard","delete","_removeCard","includes","raw","log","sort","a","b","unshift","splice","parseInt","ActionTypes","initState","cardTurned","reducer","state","action","type","useStyles","makeStyles","theme","root","width","window","innerWidth","height","innerHeight","display","gridTemplateRows","backgroundColor","palette","grey","justifySelf","alignSelf","overflow","cardContent","position","flexDirection","justifyContent","alignItems","fontSize","textAlign","marginTop","cardActions","bottom","rankButton","margin","rbFresh","error","dark","rbHigh","warning","main","rbMedium","success","rbLow","info","light","numCards","top","left","cardSpec","maxWidth","cardSpecEntry","color","search","right","searchInput","showOrderSwitch","marginLeft","speedDial","login","editor","editorActions","CardShowOrder","A_TO_B","B_TO_A","RANDOM","App","classes","useReducer","dispatch","useState","loginInput","setLoginInput","showSearch","setShowSearch","setSearchInput","cardSeen","setCardSeen","showOrder","setShowOrder","speedDialOpen","setSpeedDialOpen","stageDelete","setStageDelete","cardForEdit","setCardForEdit","getActiveCard","useCallback","catch","err","rankCard","event","stopPropagation","Button","variant","onClick","className","e","deleteCard","Fab","size","keys","entry","index","TextField","label","value","onChange","prevState","curState","target","fullWidth","to","upsertCard","Typography","getNumCardsSeen","getNumCards","r","key","i","IconButton","Autocomplete","freeSolo","disableClearable","inputValue","onInputChange","searchResultId","getIdBySearchItem","onBlur","options","getSearchItems","renderInput","params","autoFocus","Card","CardContent","CardActions","style","transform","SpeedDial","ariaLabel","hidden","icon","SpeedDialIcon","onClose","onOpen","open","direction","SpeedDialAction","tooltipTitle","init","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9646b866.chunk.js","sourcesContent":["const rootUrl = process.env.NODE_ENV === 'development'\n    ? 'http://192.168.1.3:80'\n    : 'https://wolke.glencoden.de';\n\nconst baseUrl = `${rootUrl}/cards`;\n\n\nclass RequestService {\n    _get(url) {\n        return fetch(url).then(resp => resp.json());\n    }\n\n    _post(url, data) {\n        return Promise.resolve()\n            .then(() => JSON.stringify(data))\n            .then(body => fetch(url, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json; charset=utf-8' },\n                body\n            }))\n            .then(resp => resp.json());\n    }\n\n    getUser(name) {\n        return this._get(`${baseUrl}/user/${name}`);\n    }\n\n    getAll(username) {\n        return this._get(`${baseUrl}/all/${username}`);\n    }\n\n    delete(id) {\n        return this._get(`${baseUrl}/delete/${id}`);\n    }\n\n    add(card) {\n        return this.update(card);\n    }\n\n    update(card) {\n        return this._post(`${baseUrl}/upsert`, card);\n    }\n}\n\nexport const requestService = new RequestService();","import { requestService } from './RequestService';\n\nexport const CardPriority = {\n    FRESH: 'fresh',\n    HIGH: 'high',\n    MEDIUM: 'medium',\n    LOW: 'low'\n};\n\nconst CardProbability = {\n    [CardPriority.FRESH]: 10,\n    [CardPriority.HIGH]: 4,\n    [CardPriority.MEDIUM]: 2,\n    [CardPriority.LOW]: 1\n};\n\nfunction getCardId(cards) {\n    const mostRecentCard = cards[cards.length - 1];\n    let threshold = 0;\n\n    return cards.reduce((result, card) => {\n        const curThreshold = Math.floor(CardProbability[card.priority] * (mostRecentCard.lastSeenAt - card.lastSeenAt) * Math.random());\n        if (curThreshold < threshold) {\n            return result;\n        }\n        threshold = curThreshold;\n        return card.id;\n    }, 0);\n}\n\n\nclass CardDeck {\n    _user = {};\n    _cards = [];\n    _numCardsSeen = 0;\n\n    init(username) {\n        return requestService.getUser(username)\n            .then(resp => {\n                if (!resp.user) {\n                    throw new Error('wrong user name');\n                }\n                this._setUser(resp.user);\n                return requestService.getAll(this._user.name)\n            })\n            .then(resp => {\n                this._setCards(resp);\n                return this._user;\n            });\n    }\n\n    getActiveCard(id) {\n        return new Promise((resolve, reject) => {\n            if (!this._cards.length) {\n                reject('no cards');\n                return;\n            }\n\n            const activeCard = this._getCard(id || getCardId(this._cards));\n\n            if (!activeCard) {\n                reject('no active card');\n                return;\n            }\n\n            const age = Date.now() - activeCard.lastSeenAt;\n            const minute = 1000 * 60;\n            const hour = minute * 60;\n            const day = hour * 24;\n            const ageDays = Math.floor(age / day);\n            const ageHours = Math.floor((age % day) / hour);\n            const ageMinutes = Math.floor(((age % day) % hour) / minute);\n            activeCard.spec = {\n                cardPosition: this._cards.indexOf(activeCard),\n                timeShowToRanking: `${5128 / 1000}s`,\n                timeSinceLastSeen: `${ageDays}d ${ageHours}h ${ageMinutes}m`,\n                priorityDistribution: Object.values(CardPriority).reduce((result, priority) => {\n                    result[priority] = this._cards.filter(card => card.priority === priority).length;\n                    return result;\n                }, {})\n            };\n\n            activeCard.lastSeenAt = Date.now();\n            this._sortCards();\n            this._numCardsSeen++;\n\n            resolve(activeCard);\n        });\n    }\n\n    getNumCards() {\n        return this._cards.length;\n    }\n\n    getNumCardsSeen() {\n        return this._numCardsSeen;\n    }\n\n    getSearchItems() {\n        return this._cards.map(card => Object.values(card.translations.from)[0]);\n    }\n\n    getIdBySearchItem(searchItem) {\n        const card = this._cards.find(card => Object.values(card.translations.from)[0] === searchItem);\n        if (!card) {\n            console.warn('no card for search item', searchItem);\n            return;\n        }\n        return card.id;\n    }\n\n    upsertCard(card) {\n        if (!card.id) {\n            return requestService.add({\n                user: this._user.name,\n                translations: card.translations,\n                example: card.example,\n                priority: CardPriority.FRESH,\n                lastSeenAt: Date.now()\n            })\n                .then(resp => {\n                    this._addCard(resp);\n                    return resp;\n                });\n        }\n\n        const curCard = this._getCard(card.id);\n        if (!curCard) {\n            return Promise.reject('no card to update');\n        }\n\n        return requestService.update({\n            ...curCard,\n            translations: {\n                ...curCard.translations,\n                ...card.translations\n            },\n            example: card.example\n        })\n            .then(resp => {\n                curCard.translations = resp.translations;\n                curCard.example = resp.example;\n                return curCard;\n            });\n    }\n\n    deleteCard(id) {\n        return requestService.delete(id)\n            .then(resp => {\n                this._removeCard(resp.id);\n            });\n    }\n\n    rankCard(id, priority) {\n        if (!Object.values(CardPriority).includes(priority)) {\n            return Promise.reject('no priority');\n        }\n        const curCard = this._getCard(id);\n        return requestService.update({\n            ...curCard,\n            priority\n        })\n            .then(resp => {\n                curCard.priority = resp.priority;\n            });\n    }\n\n    _setUser(raw) {\n        this._user = raw;\n        console.log('card deck set user', this._user); // TODO remove dev code\n    }\n\n    _setCards(raw) {\n        this._cards = raw;\n        this._sortCards();\n        console.log('card deck set cards', this._cards); // TODO remove dev code\n    }\n\n    _sortCards() {\n        this._cards = this._cards.sort((a, b) => a.lastSeenAt - b.lastSeenAt);\n    }\n\n    _getCard(id) {\n        return this._cards.find(card => card.id === id);\n    }\n\n    _addCard(card) {\n        this._cards.unshift(card);\n    }\n\n    _removeCard(id) {\n        this._cards.splice(this._cards.indexOf(this._cards.find(card => card.id === parseInt(id, 10))), 1);\n    }\n}\n\nexport const cardDeck = new CardDeck();","import { useReducer, useState, useCallback } from 'react';\nimport { cardDeck, CardPriority } from './js/CardDeck';\nimport { makeStyles, Card, CardContent, CardActions, Typography, Button, IconButton, Fab, TextField } from '@material-ui/core';\nimport { Autocomplete, SpeedDial, SpeedDialIcon, SpeedDialAction } from '@material-ui/lab';\n\n// adapter\n\nconst ActionTypes = {\n    SET_USER: 'set-user',\n    SET_CARD: 'set-card',\n    TURN_CARD: 'turn-card'\n};\n\nconst initState = {\n    user: null,\n    card: null,\n    cardTurned: false\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case ActionTypes.SET_USER:\n            return { ...state, user: action.user };\n        case ActionTypes.SET_CARD:\n            return { ...state, card: action.card, cardTurned: action.cardTurned };\n        case ActionTypes.TURN_CARD:\n            return { ...state, cardTurned: !state.cardTurned };\n        default:\n            return { ...state };\n    }\n};\n\n\n// ui\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: `${window.innerWidth}px`,\n        height: `${window.innerHeight}px`,\n        display: 'grid',\n        gridTemplateRows: 'auto 112px',\n        backgroundColor: theme.palette.grey['100']\n    },\n    card: {\n        width: '330px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n        overflow: 'visible'\n    },\n    cardContent: {\n        position: 'relative',\n        height: '190px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    translations: {\n        fontSize: '24px',\n        textAlign: 'center'\n    },\n    example: {\n        fontSize: '14px',\n        textAlign: 'center',\n        marginTop: '10px'\n    },\n    cardActions: {\n        position: 'absolute',\n        bottom: '-72px',\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    rankButton: {\n        margin: '0 16px'\n    },\n    rbFresh: {\n        backgroundColor: `${theme.palette.error.dark} !important`\n    },\n    rbHigh: {\n        backgroundColor: `${theme.palette.warning.main} !important`\n    },\n    rbMedium: {\n        backgroundColor: `${theme.palette.success.main} !important`\n    },\n    rbLow: {\n        backgroundColor: `${theme.palette.info.light} !important`\n    },\n    numCards: {\n        position: 'fixed',\n        top: '28px',\n        left: '28px'\n    },\n    cardSpec: {\n        position: 'fixed',\n        bottom: '2px',\n        left: '0',\n        display: 'flex',\n        justifyContent: 'space-around',\n        width: '100%',\n        maxWidth: '600px'\n    },\n    cardSpecEntry: {\n        color: theme.palette.info.main\n    },\n    search: {\n        position: 'fixed',\n        top: '16px',\n        right: '16px'\n    },\n    searchInput: {\n        width: '240px'\n    },\n    showOrderSwitch: {\n        alignSelf: 'center',\n        justifySelf: 'start',\n        marginLeft: '28px'\n    },\n    speedDial: {\n        position: 'fixed',\n        right: '28px',\n        bottom: '28px'\n    },\n    login: {\n        width: '200px',\n        height: '150px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n    },\n    editor: {\n        width: '330px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n    },\n    editorActions: {\n        width: '210px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n        display: 'flex',\n        justifyContent: 'space-between'\n    }\n}));\n\nconst CardShowOrder = {\n    A_TO_B: 'a-to-b',\n    B_TO_A: 'b-to-a',\n    RANDOM: 'random'\n};\n\n\nfunction App() {\n    const classes = useStyles();\n    const [ state, dispatch ] = useReducer(reducer, initState);\n\n    const [ loginInput, setLoginInput ] = useState('');\n    const [ showSearch, setShowSearch ] = useState(false);\n    const [ searchInput, setSearchInput ] = useState('');\n    const [ cardSeen, setCardSeen ] = useState(false);\n    const [ showOrder, setShowOrder ] = useState(CardShowOrder.A_TO_B);\n    const [ speedDialOpen, setSpeedDialOpen ] = useState(false);\n    const [ stageDelete, setStageDelete ] = useState(false);\n    const [ cardForEdit, setCardForEdit ] = useState(null);\n\n    const getActiveCard = useCallback(\n        id => {\n            setCardSeen(false);\n            let cardTurned = false;\n            if (showOrder === CardShowOrder.B_TO_A) {\n                cardTurned = true;\n            } else if (showOrder === CardShowOrder.RANDOM) {\n                cardTurned = Math.random() < 0.5;\n            }\n            cardDeck.getActiveCard(id)\n                .then(card => dispatch({ card, cardTurned, type: ActionTypes.SET_CARD }))\n                .catch(err => {\n                    console.log(err);\n                    dispatch({ card: null, type: ActionTypes.SET_CARD })\n                });\n        },\n        [ dispatch, showOrder ]\n    );\n\n    const rankCard = useCallback(\n        (event, id, priority) => {\n            event.stopPropagation();\n            cardDeck.rankCard(id, priority)\n                .then(getActiveCard);\n        },\n        [ getActiveCard ]\n    );\n\n    let cardActions = null;\n\n    if (stageDelete) {\n        cardActions = (\n            <>\n                <Button\n                    key=\"clear\"\n                    variant=\"contained\"\n                    onClick={event => {\n                        event.stopPropagation();\n                        setStageDelete(false);\n                    }}\n                >\n                    <span className=\"material-icons\">clear</span>\n                </Button>\n                <Button\n                    key=\"delete\"\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={e => {\n                        e.stopPropagation();\n                        cardDeck.deleteCard(state.card.id)\n                            .then(() => {\n                                setStageDelete(false);\n                                getActiveCard();\n                            });\n                    }}\n                >\n                    <span className=\"material-icons\">delete</span>\n                </Button>\n            </>\n        );\n    } else if (cardSeen) {\n        cardActions = (\n            <>\n                <Fab key=\"rb-fresh\" className={`${classes.rankButton} ${classes.rbFresh}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.FRESH)} />\n                <Fab key=\"rb-high\" className={`${classes.rankButton} ${classes.rbHigh}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.HIGH)} />\n                <Fab key=\"rb-medium\" className={`${classes.rankButton} ${classes.rbMedium}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.MEDIUM)} />\n                <Fab key=\"rb-low\" className={`${classes.rankButton} ${classes.rbLow}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.LOW)} />\n            </>\n        );\n    }\n\n    if (!state.user) {\n        return (\n            <div className={classes.root}>\n                <div className={classes.login}>\n                    <TextField\n                        id=\"username\"\n                        label=\"Name\"\n                        margin=\"normal\"\n                        value={loginInput}\n                        onChange={event => setLoginInput(event.target.value)}\n                        fullWidth\n                    />\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            cardDeck.init(loginInput)\n                                .then(user => dispatch({ type: ActionTypes.SET_USER, user }))\n                                .then(getActiveCard)\n                                .catch(err => console.log(err));\n                        }}\n                    >\n                        Fertig\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    if (cardForEdit) {\n        return (\n            <div className={classes.root}>\n                <div className={classes.editor}>\n                    {Object.keys(cardForEdit.translations.from).map((entry, index) => (\n                        <TextField\n                            key={entry + index}\n                            id={entry}\n                            label={entry}\n                            margin=\"normal\"\n                            value={cardForEdit.translations.from[entry]}\n                            onChange={event => setCardForEdit(prevState => {\n                                const curState = { ...prevState };\n                                curState.translations.from[entry] = event.target.value;\n                                return curState;\n                            })}\n                            fullWidth\n                        />\n                    ))}\n                    {Object.keys(cardForEdit.translations.to).map((entry, index) => (\n                        <TextField\n                            key={entry + index}\n                            id={entry}\n                            label={entry}\n                            margin=\"normal\"\n                            value={cardForEdit.translations.to[entry]}\n                            onChange={event => setCardForEdit(prevState => {\n                                const curState = { ...prevState };\n                                curState.translations.to[entry] = event.target.value;\n                                return curState;\n                            })}\n                            fullWidth\n                        />\n                    ))}\n                    <TextField\n                        id=\"example\"\n                        label=\"Beispiel\"\n                        margin=\"normal\"\n                        value={cardForEdit.example}\n                        onChange={event => setCardForEdit(prevState => ({\n                            ...prevState,\n                            example: event.target.value\n                        }))}\n                        fullWidth\n                    />\n                </div>\n                <div className={classes.editorActions}>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => setCardForEdit(null)}\n                    >\n                        Abbrechen\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            cardDeck.upsertCard(cardForEdit)\n                                .then(card => {\n                                    dispatch({ card, cardTurned: false, type: ActionTypes.SET_CARD })\n                                    setCardForEdit(null);\n                                    setCardSeen(false);\n                                })\n                        }}\n                    >\n                        Fertig\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    console.log('app render');// TODO remove dev code\n\n    return (\n        <div className={classes.root}>\n            <Typography className={classes.numCards} variant=\"caption\" color=\"textSecondary\">{`${cardDeck.getNumCardsSeen()}/${cardDeck.getNumCards()}`}</Typography>\n            {state.user.name === 'meyer' && state.card?.spec && (\n                <div className={classes.cardSpec}>\n                    <Typography className={classes.cardSpecEntry} variant=\"caption\" color=\"textSecondary\">\n                        {`${state.card.spec.cardPosition} ${state.card.priority}`}\n                    </Typography>\n                    <Typography className={classes.cardSpecEntry} variant=\"caption\" color=\"textSecondary\">\n                        {`use ${state.card.spec.timeShowToRanking}`}\n                    </Typography>\n                    <Typography className={classes.cardSpecEntry} variant=\"caption\" color=\"textSecondary\">\n                        {`age ${state.card.spec.timeSinceLastSeen}`}\n                    </Typography>\n                    <Typography className={classes.cardSpecEntry} variant=\"caption\" color=\"textSecondary\">\n                        {`dist ${Object.keys(state.card.spec.priorityDistribution).reduce((r, key, i) => r + `${i ? ' ' : ''}${state.card.spec.priorityDistribution[key]}`, '')}`}\n                    </Typography>\n                </div>\n            )}\n            <div className={classes.search}>\n                {!showSearch && (\n                    <IconButton onClick={() => setShowSearch(true)}>\n                        <span className=\"material-icons\">search</span>\n                    </IconButton>\n                )}\n                {showSearch && (\n                    <Autocomplete\n                        className={classes.searchInput}\n                        freeSolo\n                        id=\"free-solo-2-demo\"\n                        disableClearable\n                        inputValue={searchInput}\n                        onInputChange={(event, value) => setSearchInput(value)}\n                        onChange={(event, value) => {\n                            const searchResultId = cardDeck.getIdBySearchItem(value);\n                            if (!searchResultId) {\n                                return;\n                            }\n                            getActiveCard(searchResultId);\n                        }}\n                        onBlur={() => {\n                            setSearchInput('');\n                            setShowSearch(false);\n                        }}\n                        options={cardDeck.getSearchItems()}\n                        renderInput={(params) => (\n                            <TextField\n                                {...params}\n                                label=\"Suche\"\n                                variant=\"outlined\"\n                                autoFocus\n                            />\n                        )}\n                    />\n                )}\n            </div>\n\n            <Card\n                className={classes.card}\n                onClick={() => {\n                    dispatch({ type: ActionTypes.TURN_CARD });\n                    setCardSeen(true);\n                }}\n            >\n                {state.card && (\n                    <CardContent className={classes.cardContent}>\n                        {Object.values(state.cardTurned ? state.card.translations.to : state.card.translations.from).map((entry, index) => {\n                            if (!entry) {\n                                return null;\n                            }\n                            return (\n                                <Typography\n                                    key={index}\n                                    className={classes.translations}\n                                    variant=\"subtitle2\"\n                                >\n                                    {entry}\n                                </Typography>\n                            );\n                        })}\n                        {state.cardTurned && state.card.example && (\n                            <Typography\n                                className={classes.example}\n                                variant=\"caption\"\n                            >\n                                {state.card.example}\n                            </Typography>\n                        )}\n                        <CardActions className={classes.cardActions}>\n                            {cardActions}\n                        </CardActions>\n                    </CardContent>\n                )}\n            </Card>\n\n            <div className={classes.showOrderSwitch}>\n                <Typography variant=\"caption\" color=\"textSecondary\">{state.user?.from[0]}</Typography>\n                <IconButton\n                    onClick={() => setShowOrder(prevState => {\n                        const values = Object.values(CardShowOrder);\n                        return values[(values.indexOf(prevState) + 1) % 3]\n                    })}\n                >\n                    {showOrder === CardShowOrder.A_TO_B && <span className=\"material-icons\">arrow_right_alt</span>}\n                    {showOrder === CardShowOrder.B_TO_A && <span className=\"material-icons\" style={{ transform: 'rotate(180deg)' }}>arrow_right_alt</span>}\n                    {showOrder === CardShowOrder.RANDOM && <span className=\"material-icons\">swap_horiz</span>}\n                </IconButton>\n                <Typography variant=\"caption\" color=\"textSecondary\">{state.user?.to[0]}</Typography>\n            </div>\n\n            <SpeedDial\n                className={classes.speedDial}\n                ariaLabel=\"SpeedDial\"\n                hidden={false}\n                icon={<SpeedDialIcon/>}\n                onClose={() => setSpeedDialOpen(false)}\n                onOpen={() => setSpeedDialOpen(true)}\n                open={speedDialOpen}\n                direction=\"up\"\n            >\n                <SpeedDialAction\n                    icon={<span className=\"material-icons\">add</span>}\n                    tooltipTitle=\"Neu\"\n                    onClick={() => {\n                        setCardForEdit({\n                            translations: {\n                                from: state.user.from.reduce((r, e) => ({ ...r, [e]: '' }), {}),\n                                to: state.user.to.reduce((r, e) => ({ ...r, [e]: '' }), {})\n                            },\n                            example: ''\n                        });\n                        setSpeedDialOpen(false);\n                    }}\n                />\n                <SpeedDialAction\n                    icon={<span className=\"material-icons\">edit</span>}\n                    tooltipTitle=\"Bearbeiten\"\n                    onClick={() => {\n                        if (state.card) {\n                            setCardForEdit(state.card);\n                        }\n                        setSpeedDialOpen(false);\n                    }}\n                />\n                <SpeedDialAction\n                    icon={<span className=\"material-icons\">delete</span>}\n                    tooltipTitle=\"Löschen\"\n                    onClick={() => {\n                        if (state.card) {\n                            setStageDelete(true);\n                        }\n                        setSpeedDialOpen(false);\n                    }}\n                />\n            </SpeedDial>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}