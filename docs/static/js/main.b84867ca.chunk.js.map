{"version":3,"sources":["js/RequestService.js","js/CardDeck.js","App.js","index.js"],"names":["baseUrl","requestService","url","fetch","then","resp","json","data","Promise","resolve","JSON","stringify","body","method","headers","name","this","_get","username","id","card","update","_post","CardPriority","FRESH","HIGH","MEDIUM","LOW","CardProbability","cardDeck","_cards","_user","find","prevChance","Object","keys","reduce","result","key","chance","Math","random","priority","getUser","user","Error","console","log","getAll","reject","curPriority","_getPriority","activeCard","filter","r","e","lastSeenAt","Date","now","length","curCard","_getCard","resCard","priorities","values","indexOf","delete","splice","parseInt","add","translations","example","push","ActionTypes","initState","cardTurned","reducer","state","action","type","useStyles","makeStyles","theme","root","width","window","innerWidth","height","innerHeight","display","gridTemplateRows","backgroundColor","palette","grey","justifySelf","alignSelf","overflow","cardContent","position","flexDirection","justifyContent","alignItems","fontSize","textAlign","marginTop","cardActions","bottom","rankButton","margin","rbFresh","error","dark","rbHigh","warning","main","rbMedium","success","rbLow","info","light","numCards","top","left","showOrderSwitch","marginLeft","speedDial","right","login","editor","editorActions","CardShowOrder","A_TO_B","B_TO_A","RANDOM","App","classes","useReducer","dispatch","useState","loginInput","setLoginInput","cardSeen","setCardSeen","showOrder","setShowOrder","speedDialOpen","setSpeedDialOpen","stageDelete","setStageDelete","cardForEdit","setCardForEdit","getActiveCard","useCallback","catch","err","rankCard","event","stopPropagation","Button","variant","onClick","className","color","deleteCard","Fab","size","from","map","entry","index","TextField","label","value","onChange","prevState","curState","target","fullWidth","to","updateCard","Typography","getNumCards","Card","CardContent","CardActions","IconButton","style","transform","SpeedDial","ariaLabel","hidden","icon","SpeedDialIcon","onClose","onOpen","open","direction","SpeedDialAction","tooltipTitle","init","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b84867ca.chunk.js","sourcesContent":["// const rootUrl = 'http://192.168.1.3:80';\nconst rootUrl = 'https://wolke.glencoden.de';\nconst baseUrl = `${rootUrl}/cards`;\n\n\nclass RequestService {\n    _get(url) {\n        return fetch(url).then(resp => resp.json());\n    }\n\n    _post(url, data) {\n        return Promise.resolve()\n            .then(() => JSON.stringify(data))\n            .then(body => fetch(url, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json; charset=utf-8' },\n                body\n            }))\n            .then(resp => resp.json());\n    }\n\n    getUser(name) {\n        return this._get(`${baseUrl}/user/${name}`);\n    }\n\n    getAll(username) {\n        return this._get(`${baseUrl}/all/${username}`);\n    }\n\n    delete(id) {\n        return this._get(`${baseUrl}/delete/${id}`);\n    }\n\n    add(card) {\n        return this.update(card);\n    }\n\n    update(card) {\n        return this._post(`${baseUrl}/upsert`, card);\n    }\n}\n\nexport const requestService = new RequestService();","import { requestService } from './RequestService';\n\nexport const CardPriority = {\n    FRESH: 'fresh',\n    HIGH: 'high',\n    MEDIUM: 'medium',\n    LOW: 'low'\n};\n\nconst CardProbability = {\n    [CardPriority.FRESH]: 6,\n    [CardPriority.HIGH]: 4,\n    [CardPriority.MEDIUM]: 3,\n    [CardPriority.LOW]: 1\n};\n\n\nclass CardDeck {\n    _cards = [];\n    _user = {};\n\n    _getCard(id) {\n        return this._cards.find(card => card.id === id);\n    }\n\n    _getPriority() {\n        let prevChance = 0;\n        return Object.keys(CardProbability).reduce((result, key) => {\n            const chance = Math.random() * CardProbability[key];\n            if (chance <= prevChance || !this._cards.find(card => card.priority === key)) {\n                return result;\n            }\n            prevChance = chance;\n            return key;\n        }, '');\n    }\n\n    init(username) {\n        return requestService.getUser(username)\n            .then(resp => {\n                if (!resp.user) {\n                    throw new Error('wrong user name');\n                }\n                console.log('card deck init user', resp.user); // TODO remove dev code\n                this._user = resp.user;\n                return requestService.getAll(this._user.name)\n            })\n            .then(resp => {\n                console.log('card deck init cards', resp); // TODO remove dev code\n                this._cards = resp;\n                return this._user;\n            });\n    }\n\n    getActiveCard() {\n        return new Promise((resolve, reject) => {\n            const curPriority = this._getPriority();\n            const activeCard = this._cards\n                .filter(card => card.priority === curPriority)\n                .reduce((r, e) => (r && (r.lastSeenAt < e.lastSeenAt)) ? r : e, null);\n            if (!activeCard) {\n                reject('no active card');\n                return;\n            }\n            activeCard.lastSeenAt = Date.now();\n            resolve(activeCard);\n        });\n    }\n\n    getNumCards() {\n        return this._cards.length;\n    }\n\n    shuffleCards() {\n        // randomize lastSeenAt from cards.length numbers\n    }\n\n    rankCard(id, priority) {\n        const curCard = this._getCard(id);\n        const resCard = {\n            ...curCard,\n            priority\n        };\n        const priorities = Object.values(CardPriority);\n        if (priorities.indexOf(resCard.priority) < priorities.indexOf(curCard.priority)) {\n            resCard.lastSeenAt = 0;\n        }\n        return requestService.update(resCard)\n            .then(resp => {\n                curCard.priority = resp.priority;\n                curCard.lastSeenAt = resp.lastSeenAt;\n            });\n    }\n\n    deleteCard(id) {\n        return requestService.delete(id)\n            .then(resp => {\n                this._cards.splice(this._cards.indexOf(this._cards.find(card => card.id === parseInt(resp.id, 10))), 1);\n            });\n    }\n\n    updateCard(card) {\n        if (!card.id) {\n            return requestService.add({\n                user: this._user.name,\n                translations: card.translations,\n                example: card.example,\n                priority: CardPriority.FRESH,\n                lastSeenAt: Date.now()\n            })\n                .then(resp => {\n                    this._cards.push(resp);\n                    return resp;\n                });\n        }\n        const curCard = this._getCard(card.id);\n        if (!curCard) {\n            return Promise.reject('no card to update');\n        }\n        return requestService.update({\n            ...curCard,\n            translations: {\n                ...curCard.translations,\n                ...card.translations\n            },\n            example: card.example\n        })\n            .then(resp => {\n                curCard.translations = resp.translations;\n                curCard.example = resp.example;\n                return curCard;\n            });\n    }\n}\n\nexport const cardDeck = new CardDeck();","import { useReducer, useState, useCallback } from 'react';\nimport { cardDeck, CardPriority } from './js/CardDeck';\nimport { makeStyles, Card, CardContent, CardActions, Typography, Button, IconButton, Fab, TextField } from '@material-ui/core';\nimport { SpeedDial, SpeedDialIcon, SpeedDialAction } from '@material-ui/lab';\n\n\n// adapter\n\nconst ActionTypes = {\n    SET_USER: 'set-user',\n    SET_CARD: 'set-card',\n    TURN_CARD: 'turn-card'\n};\n\nconst initState = {\n    user: null,\n    card: null,\n    cardTurned: false\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case ActionTypes.SET_USER:\n            return { ...state, user: action.user };\n        case ActionTypes.SET_CARD:\n            return { ...state, card: action.card, cardTurned: action.cardTurned };\n        case ActionTypes.TURN_CARD:\n            return { ...state, cardTurned: !state.cardTurned };\n        default:\n            return { ...state };\n    }\n};\n\n\n// ui\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: `${window.innerWidth}px`,\n        height: `${window.innerHeight}px`,\n        display: 'grid',\n        gridTemplateRows: 'auto 112px',\n        backgroundColor: theme.palette.grey['100']\n    },\n    card: {\n        width: '330px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n        overflow: 'visible'\n    },\n    cardContent: {\n        position: 'relative',\n        height: '190px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    translations: {\n        fontSize: '24px',\n        textAlign: 'center'\n    },\n    example: {\n        fontSize: '14px',\n        textAlign: 'center',\n        marginTop: '10px'\n    },\n    cardActions: {\n        position: 'absolute',\n        bottom: '-72px',\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    rankButton: {\n        margin: '0 16px'\n    },\n    rbFresh: {\n        backgroundColor: `${theme.palette.error.dark} !important`\n    },\n    rbHigh: {\n        backgroundColor: `${theme.palette.warning.main} !important`\n    },\n    rbMedium: {\n        backgroundColor: `${theme.palette.success.main} !important`\n    },\n    rbLow: {\n        backgroundColor: `${theme.palette.info.light} !important`\n    },\n    numCards: {\n        position: 'fixed',\n        top: '28px',\n        left: '28px'\n    },\n    showOrderSwitch: {\n        alignSelf: 'center',\n        justifySelf: 'start',\n        marginLeft: '28px'\n    },\n    speedDial: {\n        position: 'fixed',\n        right: '28px',\n        bottom: '28px'\n    },\n    login: {\n        width: '200px',\n        height: '150px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n    },\n    editor: {\n        width: '330px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n    },\n    editorActions: {\n        width: '210px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n        display: 'flex',\n        justifyContent: 'space-between'\n    }\n}));\n\nconst CardShowOrder = {\n    A_TO_B: 'a-to-b',\n    B_TO_A: 'b-to-a',\n    RANDOM: 'random'\n};\n\n\nfunction App() {\n    const classes = useStyles();\n    const [ state, dispatch ] = useReducer(reducer, initState);\n\n    const [ loginInput, setLoginInput ] = useState('');\n    const [ cardSeen, setCardSeen ] = useState(false);\n    const [ showOrder, setShowOrder ] = useState(CardShowOrder.A_TO_B);\n    const [ speedDialOpen, setSpeedDialOpen ] = useState(false);\n    const [ stageDelete, setStageDelete ] = useState(false);\n    const [ cardForEdit, setCardForEdit ] = useState(null);\n\n    const getActiveCard = useCallback(\n        () => {\n            setCardSeen(false);\n            let cardTurned = false;\n            if (showOrder === CardShowOrder.B_TO_A) {\n                cardTurned = true;\n            } else if (showOrder === CardShowOrder.RANDOM) {\n                cardTurned = Math.random() < 0.5;\n            }\n            cardDeck.getActiveCard()\n                .then(card => dispatch({ card, cardTurned, type: ActionTypes.SET_CARD }))\n                .catch(err => {\n                    console.log(err);\n                    dispatch({ card: null, type: ActionTypes.SET_CARD })\n                });\n        },\n        [ dispatch, showOrder ]\n    );\n\n    const rankCard = useCallback(\n        (event, id, priority) => {\n            event.stopPropagation();\n            cardDeck.rankCard(id, priority)\n                .then(getActiveCard);\n        },\n        [ getActiveCard ]\n    );\n\n    let cardActions = null;\n\n    if (stageDelete) {\n        cardActions = (\n            <>\n                <Button\n                    key=\"clear\"\n                    variant=\"contained\"\n                    onClick={event => {\n                        event.stopPropagation();\n                        setStageDelete(false);\n                    }}\n                >\n                    <span className=\"material-icons\">clear</span>\n                </Button>\n                <Button\n                    key=\"delete\"\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={e => {\n                        e.stopPropagation();\n                        cardDeck.deleteCard(state.card.id)\n                            .then(() => {\n                                setStageDelete(false);\n                                getActiveCard();\n                            });\n                    }}\n                >\n                    <span className=\"material-icons\">delete</span>\n                </Button>\n            </>\n        );\n    } else if (cardSeen) {\n        cardActions = (\n            <>\n                <Fab key=\"rb-fresh\" className={`${classes.rankButton} ${classes.rbFresh}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.FRESH)} />\n                <Fab key=\"rb-high\" className={`${classes.rankButton} ${classes.rbHigh}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.HIGH)} />\n                <Fab key=\"rb-medium\" className={`${classes.rankButton} ${classes.rbMedium}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.MEDIUM)} />\n                <Fab key=\"rb-low\" className={`${classes.rankButton} ${classes.rbLow}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.LOW)} />\n            </>\n        );\n    }\n\n    if (!state.user) {\n        return (\n            <div className={classes.root}>\n                <div className={classes.login}>\n                    <TextField\n                        id=\"username\"\n                        label=\"Name\"\n                        margin=\"normal\"\n                        value={loginInput}\n                        onChange={event => setLoginInput(event.target.value)}\n                        fullWidth\n                    />\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            cardDeck.init(loginInput)\n                                .then(user => dispatch({ type: ActionTypes.SET_USER, user }))\n                                .then(getActiveCard)\n                                .catch(err => console.log(err));\n                        }}\n                    >\n                        Fertig\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    if (cardForEdit) {\n        return (\n            <div className={classes.root}>\n                <div className={classes.editor}>\n                    {Object.keys(cardForEdit.translations.from).map((entry, index) => (\n                        <TextField\n                            key={entry + index}\n                            id={entry}\n                            label={entry}\n                            margin=\"normal\"\n                            value={cardForEdit.translations.from[entry]}\n                            onChange={event => setCardForEdit(prevState => {\n                                const curState = { ...prevState };\n                                curState.translations.from[entry] = event.target.value;\n                                return curState;\n                            })}\n                            fullWidth\n                        />\n                    ))}\n                    {Object.keys(cardForEdit.translations.to).map((entry, index) => (\n                        <TextField\n                            key={entry + index}\n                            id={entry}\n                            label={entry}\n                            margin=\"normal\"\n                            value={cardForEdit.translations.to[entry]}\n                            onChange={event => setCardForEdit(prevState => {\n                                const curState = { ...prevState };\n                                curState.translations.to[entry] = event.target.value;\n                                return curState;\n                            })}\n                            fullWidth\n                        />\n                    ))}\n                    <TextField\n                        id=\"example\"\n                        label=\"Beispiel\"\n                        margin=\"normal\"\n                        value={cardForEdit.example}\n                        onChange={event => setCardForEdit(prevState => ({\n                            ...prevState,\n                            example: event.target.value\n                        }))}\n                        fullWidth\n                    />\n                </div>\n                <div className={classes.editorActions}>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => setCardForEdit(null)}\n                    >\n                        Abbrechen\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            cardDeck.updateCard(cardForEdit)\n                                .then(card => {\n                                    dispatch({ card, cardTurned: false, type: ActionTypes.SET_CARD })\n                                    setCardForEdit(null);\n                                    setCardSeen(false);\n                                })\n                        }}\n                    >\n                        Fertig\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    console.log('app active card', state.card);// TODO remove dev code\n\n    return (\n        <div className={classes.root}>\n            <Typography className={classes.numCards} variant=\"caption\" color=\"textSecondary\">{`${cardDeck.getNumCards()} cards`}</Typography>\n\n            <Card\n                className={classes.card}\n                onClick={() => {\n                    dispatch({ type: ActionTypes.TURN_CARD });\n                    setCardSeen(true);\n                }}\n            >\n                {state.card && (\n                    <CardContent className={classes.cardContent}>\n                        {Object.values(state.cardTurned ? state.card.translations.to : state.card.translations.from).map((entry, index) => {\n                            if (!entry) {\n                                return null;\n                            }\n                            return (\n                                <Typography\n                                    key={index}\n                                    className={classes.translations}\n                                    variant=\"subtitle2\"\n                                >\n                                    {entry}\n                                </Typography>\n                            );\n                        })}\n                        {state.cardTurned && state.card.example && (\n                            <Typography\n                                className={classes.example}\n                                variant=\"caption\"\n                            >\n                                {state.card.example}\n                            </Typography>\n                        )}\n                        <CardActions className={classes.cardActions}>\n                            {cardActions}\n                        </CardActions>\n                    </CardContent>\n                )}\n            </Card>\n\n            <div className={classes.showOrderSwitch}>\n                <Typography variant=\"caption\" color=\"textSecondary\">{state.user?.from[0]}</Typography>\n                <IconButton\n                    onClick={() => setShowOrder(prevState => {\n                        const values = Object.values(CardShowOrder);\n                        return values[(values.indexOf(prevState) + 1) % 3]\n                    })}\n                >\n                    {showOrder === CardShowOrder.A_TO_B && <span className=\"material-icons\">arrow_right_alt</span>}\n                    {showOrder === CardShowOrder.B_TO_A && <span className=\"material-icons\" style={{ transform: 'rotate(180deg)' }}>arrow_right_alt</span>}\n                    {showOrder === CardShowOrder.RANDOM && <span className=\"material-icons\">swap_horiz</span>}\n                </IconButton>\n                <Typography variant=\"caption\" color=\"textSecondary\">{state.user?.to[0]}</Typography>\n            </div>\n\n            <SpeedDial\n                className={classes.speedDial}\n                ariaLabel=\"SpeedDial\"\n                hidden={false}\n                icon={<SpeedDialIcon/>}\n                onClose={() => setSpeedDialOpen(false)}\n                onOpen={() => setSpeedDialOpen(true)}\n                open={speedDialOpen}\n                direction=\"up\"\n            >\n                <SpeedDialAction\n                    icon={<span className=\"material-icons\">add</span>}\n                    tooltipTitle=\"Neu\"\n                    onClick={() => {\n                        setCardForEdit({\n                            translations: {\n                                from: state.user.from.reduce((r, e) => ({ ...r, [e]: '' }), {}),\n                                to: state.user.to.reduce((r, e) => ({ ...r, [e]: '' }), {})\n                            },\n                            example: ''\n                        });\n                        setSpeedDialOpen(false);\n                    }}\n                />\n                <SpeedDialAction\n                    icon={<span className=\"material-icons\">edit</span>}\n                    tooltipTitle=\"Bearbeiten\"\n                    onClick={() => {\n                        if (state.card) {\n                            setCardForEdit(state.card);\n                        }\n                        setSpeedDialOpen(false);\n                    }}\n                />\n                <SpeedDialAction\n                    icon={<span className=\"material-icons\">delete</span>}\n                    tooltipTitle=\"Löschen\"\n                    onClick={() => {\n                        if (state.card) {\n                            setStageDelete(true);\n                        }\n                        setSpeedDialOpen(false);\n                    }}\n                />\n            </SpeedDial>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}