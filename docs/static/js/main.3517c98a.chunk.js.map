{"version":3,"sources":["js/RequestService.js","js/CardDeck.js","App.js","index.js"],"names":["baseUrl","requestService","url","fetch","then","resp","json","data","Promise","resolve","JSON","stringify","body","method","headers","name","this","_get","username","id","card","update","_post","CardPriority","FRESH","HIGH","MEDIUM","LOW","CardProbability","cardDeck","_user","_cards","getUser","user","Error","_setUser","getAll","_setCards","reject","length","mostRecentCard","threshold","activeCardId","reduce","result","index","curThreshold","Math","floor","priority","lastSeenAt","random","activeCard","_getCard","console","log","filter","e","Date","now","_sortCards","add","translations","example","_addCard","curCard","delete","_removeCard","Object","values","includes","raw","sort","a","b","find","unshift","splice","indexOf","parseInt","ActionTypes","initState","cardTurned","reducer","state","action","type","useStyles","makeStyles","theme","root","width","window","innerWidth","height","innerHeight","display","gridTemplateRows","backgroundColor","palette","grey","justifySelf","alignSelf","overflow","cardContent","position","flexDirection","justifyContent","alignItems","fontSize","textAlign","marginTop","cardActions","bottom","rankButton","margin","rbFresh","error","dark","rbHigh","warning","main","rbMedium","success","rbLow","info","light","numCards","top","left","showOrderSwitch","marginLeft","speedDial","right","login","editor","editorActions","CardShowOrder","A_TO_B","B_TO_A","RANDOM","App","classes","useReducer","dispatch","useState","loginInput","setLoginInput","cardSeen","setCardSeen","showOrder","setShowOrder","speedDialOpen","setSpeedDialOpen","stageDelete","setStageDelete","cardForEdit","setCardForEdit","getActiveCard","useCallback","catch","err","rankCard","event","stopPropagation","Button","variant","onClick","className","color","deleteCard","Fab","size","keys","from","map","entry","TextField","label","value","onChange","prevState","curState","target","fullWidth","to","upsertCard","Typography","getNumCards","Card","CardContent","CardActions","IconButton","style","transform","SpeedDial","ariaLabel","hidden","icon","SpeedDialIcon","onClose","onOpen","open","direction","SpeedDialAction","tooltipTitle","r","init","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3517c98a.chunk.js","sourcesContent":["// const rootUrl = 'http://192.168.1.3:80';\nconst rootUrl = 'https://wolke.glencoden.de';\nconst baseUrl = `${rootUrl}/cards`;\n\n\nclass RequestService {\n    _get(url) {\n        return fetch(url).then(resp => resp.json());\n    }\n\n    _post(url, data) {\n        return Promise.resolve()\n            .then(() => JSON.stringify(data))\n            .then(body => fetch(url, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json; charset=utf-8' },\n                body\n            }))\n            .then(resp => resp.json());\n    }\n\n    getUser(name) {\n        return this._get(`${baseUrl}/user/${name}`);\n    }\n\n    getAll(username) {\n        return this._get(`${baseUrl}/all/${username}`);\n    }\n\n    delete(id) {\n        return this._get(`${baseUrl}/delete/${id}`);\n    }\n\n    add(card) {\n        return this.update(card);\n    }\n\n    update(card) {\n        return this._post(`${baseUrl}/upsert`, card);\n    }\n}\n\nexport const requestService = new RequestService();","import { requestService } from './RequestService';\n\nexport const CardPriority = {\n    FRESH: 'fresh',\n    HIGH: 'high',\n    MEDIUM: 'medium',\n    LOW: 'low'\n};\n\nconst CardProbability = {\n    [CardPriority.FRESH]: 6,\n    [CardPriority.HIGH]: 4,\n    [CardPriority.MEDIUM]: 3,\n    [CardPriority.LOW]: 1\n};\n\n\nclass CardDeck {\n    _user = {};\n    _cards = [];\n\n    init(username) {\n        return requestService.getUser(username)\n            .then(resp => {\n                if (!resp.user) {\n                    throw new Error('wrong user name');\n                }\n                this._setUser(resp.user);\n                return requestService.getAll(this._user.name)\n            })\n            .then(resp => {\n                this._setCards(resp);\n                return this._user;\n            });\n    }\n\n    getActiveCard() {\n        return new Promise((resolve, reject) => {\n            if (!this._cards.length) {\n                reject('no cards');\n                return;\n            }\n\n            const mostRecentCard = this._cards[this._cards.length - 1];\n            let threshold = 0;\n\n            const activeCardId = this._cards.reduce((result, card, index) => {\n                const curThreshold = Math.floor(CardProbability[card.priority] * (mostRecentCard.lastSeenAt - card.lastSeenAt) * Math.random());\n                if (curThreshold < threshold) {\n                    return result;\n                }\n                threshold = curThreshold;\n                return card.id;\n            }, 0);\n\n            const activeCard = this._getCard(activeCardId);\n            if (!activeCard) {\n                reject('no active card');\n                return;\n            }\n\n            console.log('active card', activeCard);// TODO remove dev code\n            console.log(`fresh ${this._cards.filter(e => e.priority === CardPriority.FRESH).length}, high ${this._cards.filter(e => e.priority === CardPriority.HIGH).length}, mid ${this._cards.filter(e => e.priority === CardPriority.MEDIUM).length}, low ${this._cards.filter(e => e.priority === CardPriority.LOW).length}`);// TODO remove dev code\n\n            activeCard.lastSeenAt = Date.now();\n            this._sortCards();\n\n            resolve(activeCard);\n        });\n    }\n\n    getNumCards() {\n        return this._cards.length;\n    }\n\n    upsertCard(card) {\n        if (!card.id) {\n            return requestService.add({\n                user: this._user.name,\n                translations: card.translations,\n                example: card.example,\n                priority: CardPriority.FRESH,\n                lastSeenAt: Date.now()\n            })\n                .then(resp => {\n                    this._addCard(resp);\n                    return resp;\n                });\n        }\n\n        const curCard = this._getCard(card.id);\n        if (!curCard) {\n            return Promise.reject('no card to update');\n        }\n\n        return requestService.update({\n            ...curCard,\n            translations: {\n                ...curCard.translations,\n                ...card.translations\n            },\n            example: card.example\n        })\n            .then(resp => {\n                curCard.translations = resp.translations;\n                curCard.example = resp.example;\n                return curCard;\n            });\n    }\n\n    deleteCard(id) {\n        return requestService.delete(id)\n            .then(resp => {\n                this._removeCard(resp.id);\n            });\n    }\n\n    rankCard(id, priority) {\n        if (!Object.values(CardPriority).includes(priority)) {\n            return Promise.reject('no priority');\n        }\n        const curCard = this._getCard(id);\n        return requestService.update({\n            ...curCard,\n            priority\n        })\n            .then(resp => {\n                curCard.priority = resp.priority;\n            });\n    }\n\n    _setUser(raw) {\n        this._user = raw;\n        console.log('card deck set user', this._user); // TODO remove dev code\n    }\n\n    _setCards(raw) {\n        this._cards = raw;\n        this._sortCards();\n        console.log('card deck set cards', this._cards); // TODO remove dev code\n    }\n\n    _sortCards() {\n        this._cards = this._cards.sort((a, b) => a.lastSeenAt - b.lastSeenAt);\n    }\n\n    _getCard(id) {\n        return this._cards.find(card => card.id === id);\n    }\n\n    _addCard(card) {\n        this._cards.unshift(card);\n    }\n\n    _removeCard(id) {\n        this._cards.splice(this._cards.indexOf(this._cards.find(card => card.id === parseInt(id, 10))), 1);\n    }\n}\n\nexport const cardDeck = new CardDeck();","import { useReducer, useState, useCallback } from 'react';\nimport { cardDeck, CardPriority } from './js/CardDeck';\nimport { makeStyles, Card, CardContent, CardActions, Typography, Button, IconButton, Fab, TextField } from '@material-ui/core';\nimport { SpeedDial, SpeedDialIcon, SpeedDialAction } from '@material-ui/lab';\n\n\n// adapter\n\nconst ActionTypes = {\n    SET_USER: 'set-user',\n    SET_CARD: 'set-card',\n    TURN_CARD: 'turn-card'\n};\n\nconst initState = {\n    user: null,\n    card: null,\n    cardTurned: false\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case ActionTypes.SET_USER:\n            return { ...state, user: action.user };\n        case ActionTypes.SET_CARD:\n            return { ...state, card: action.card, cardTurned: action.cardTurned };\n        case ActionTypes.TURN_CARD:\n            return { ...state, cardTurned: !state.cardTurned };\n        default:\n            return { ...state };\n    }\n};\n\n\n// ui\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: `${window.innerWidth}px`,\n        height: `${window.innerHeight}px`,\n        display: 'grid',\n        gridTemplateRows: 'auto 112px',\n        backgroundColor: theme.palette.grey['100']\n    },\n    card: {\n        width: '330px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n        overflow: 'visible'\n    },\n    cardContent: {\n        position: 'relative',\n        height: '190px',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center'\n    },\n    translations: {\n        fontSize: '24px',\n        textAlign: 'center'\n    },\n    example: {\n        fontSize: '14px',\n        textAlign: 'center',\n        marginTop: '10px'\n    },\n    cardActions: {\n        position: 'absolute',\n        bottom: '-72px',\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    rankButton: {\n        margin: '0 16px'\n    },\n    rbFresh: {\n        backgroundColor: `${theme.palette.error.dark} !important`\n    },\n    rbHigh: {\n        backgroundColor: `${theme.palette.warning.main} !important`\n    },\n    rbMedium: {\n        backgroundColor: `${theme.palette.success.main} !important`\n    },\n    rbLow: {\n        backgroundColor: `${theme.palette.info.light} !important`\n    },\n    numCards: {\n        position: 'fixed',\n        top: '28px',\n        left: '28px'\n    },\n    showOrderSwitch: {\n        alignSelf: 'center',\n        justifySelf: 'start',\n        marginLeft: '28px'\n    },\n    speedDial: {\n        position: 'fixed',\n        right: '28px',\n        bottom: '28px'\n    },\n    login: {\n        width: '200px',\n        height: '150px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'space-between',\n        alignItems: 'center'\n    },\n    editor: {\n        width: '330px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n    },\n    editorActions: {\n        width: '210px',\n        justifySelf: 'center',\n        alignSelf: 'center',\n        display: 'flex',\n        justifyContent: 'space-between'\n    }\n}));\n\nconst CardShowOrder = {\n    A_TO_B: 'a-to-b',\n    B_TO_A: 'b-to-a',\n    RANDOM: 'random'\n};\n\n\nfunction App() {\n    const classes = useStyles();\n    const [ state, dispatch ] = useReducer(reducer, initState);\n\n    const [ loginInput, setLoginInput ] = useState('');\n    const [ cardSeen, setCardSeen ] = useState(false);\n    const [ showOrder, setShowOrder ] = useState(CardShowOrder.A_TO_B);\n    const [ speedDialOpen, setSpeedDialOpen ] = useState(false);\n    const [ stageDelete, setStageDelete ] = useState(false);\n    const [ cardForEdit, setCardForEdit ] = useState(null);\n\n    const getActiveCard = useCallback(\n        () => {\n            setCardSeen(false);\n            let cardTurned = false;\n            if (showOrder === CardShowOrder.B_TO_A) {\n                cardTurned = true;\n            } else if (showOrder === CardShowOrder.RANDOM) {\n                cardTurned = Math.random() < 0.5;\n            }\n            cardDeck.getActiveCard()\n                .then(card => dispatch({ card, cardTurned, type: ActionTypes.SET_CARD }))\n                .catch(err => {\n                    console.log(err);\n                    dispatch({ card: null, type: ActionTypes.SET_CARD })\n                });\n        },\n        [ dispatch, showOrder ]\n    );\n\n    const rankCard = useCallback(\n        (event, id, priority) => {\n            event.stopPropagation();\n            cardDeck.rankCard(id, priority)\n                .then(getActiveCard);\n        },\n        [ getActiveCard ]\n    );\n\n    let cardActions = null;\n\n    if (stageDelete) {\n        cardActions = (\n            <>\n                <Button\n                    key=\"clear\"\n                    variant=\"contained\"\n                    onClick={event => {\n                        event.stopPropagation();\n                        setStageDelete(false);\n                    }}\n                >\n                    <span className=\"material-icons\">clear</span>\n                </Button>\n                <Button\n                    key=\"delete\"\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={e => {\n                        e.stopPropagation();\n                        cardDeck.deleteCard(state.card.id)\n                            .then(() => {\n                                setStageDelete(false);\n                                getActiveCard();\n                            });\n                    }}\n                >\n                    <span className=\"material-icons\">delete</span>\n                </Button>\n            </>\n        );\n    } else if (cardSeen) {\n        cardActions = (\n            <>\n                <Fab key=\"rb-fresh\" className={`${classes.rankButton} ${classes.rbFresh}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.FRESH)} />\n                <Fab key=\"rb-high\" className={`${classes.rankButton} ${classes.rbHigh}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.HIGH)} />\n                <Fab key=\"rb-medium\" className={`${classes.rankButton} ${classes.rbMedium}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.MEDIUM)} />\n                <Fab key=\"rb-low\" className={`${classes.rankButton} ${classes.rbLow}`} size=\"small\" onClick={event => rankCard(event, state.card.id, CardPriority.LOW)} />\n            </>\n        );\n    }\n\n    if (!state.user) {\n        return (\n            <div className={classes.root}>\n                <div className={classes.login}>\n                    <TextField\n                        id=\"username\"\n                        label=\"Name\"\n                        margin=\"normal\"\n                        value={loginInput}\n                        onChange={event => setLoginInput(event.target.value)}\n                        fullWidth\n                    />\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            cardDeck.init(loginInput)\n                                .then(user => dispatch({ type: ActionTypes.SET_USER, user }))\n                                .then(getActiveCard)\n                                .catch(err => console.log(err));\n                        }}\n                    >\n                        Fertig\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    if (cardForEdit) {\n        return (\n            <div className={classes.root}>\n                <div className={classes.editor}>\n                    {Object.keys(cardForEdit.translations.from).map((entry, index) => (\n                        <TextField\n                            key={entry + index}\n                            id={entry}\n                            label={entry}\n                            margin=\"normal\"\n                            value={cardForEdit.translations.from[entry]}\n                            onChange={event => setCardForEdit(prevState => {\n                                const curState = { ...prevState };\n                                curState.translations.from[entry] = event.target.value;\n                                return curState;\n                            })}\n                            fullWidth\n                        />\n                    ))}\n                    {Object.keys(cardForEdit.translations.to).map((entry, index) => (\n                        <TextField\n                            key={entry + index}\n                            id={entry}\n                            label={entry}\n                            margin=\"normal\"\n                            value={cardForEdit.translations.to[entry]}\n                            onChange={event => setCardForEdit(prevState => {\n                                const curState = { ...prevState };\n                                curState.translations.to[entry] = event.target.value;\n                                return curState;\n                            })}\n                            fullWidth\n                        />\n                    ))}\n                    <TextField\n                        id=\"example\"\n                        label=\"Beispiel\"\n                        margin=\"normal\"\n                        value={cardForEdit.example}\n                        onChange={event => setCardForEdit(prevState => ({\n                            ...prevState,\n                            example: event.target.value\n                        }))}\n                        fullWidth\n                    />\n                </div>\n                <div className={classes.editorActions}>\n                    <Button\n                        variant=\"contained\"\n                        onClick={() => setCardForEdit(null)}\n                    >\n                        Abbrechen\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={() => {\n                            cardDeck.upsertCard(cardForEdit)\n                                .then(card => {\n                                    dispatch({ card, cardTurned: false, type: ActionTypes.SET_CARD })\n                                    setCardForEdit(null);\n                                    setCardSeen(false);\n                                })\n                        }}\n                    >\n                        Fertig\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    console.log('app render');// TODO remove dev code\n\n    return (\n        <div className={classes.root}>\n            <Typography className={classes.numCards} variant=\"caption\" color=\"textSecondary\">{`${cardDeck.getNumCards()} cards`}</Typography>\n\n            <Card\n                className={classes.card}\n                onClick={() => {\n                    dispatch({ type: ActionTypes.TURN_CARD });\n                    setCardSeen(true);\n                }}\n            >\n                {state.card && (\n                    <CardContent className={classes.cardContent}>\n                        {Object.values(state.cardTurned ? state.card.translations.to : state.card.translations.from).map((entry, index) => {\n                            if (!entry) {\n                                return null;\n                            }\n                            return (\n                                <Typography\n                                    key={index}\n                                    className={classes.translations}\n                                    variant=\"subtitle2\"\n                                >\n                                    {entry}\n                                </Typography>\n                            );\n                        })}\n                        {state.cardTurned && state.card.example && (\n                            <Typography\n                                className={classes.example}\n                                variant=\"caption\"\n                            >\n                                {state.card.example}\n                            </Typography>\n                        )}\n                        <CardActions className={classes.cardActions}>\n                            {cardActions}\n                        </CardActions>\n                    </CardContent>\n                )}\n            </Card>\n\n            <div className={classes.showOrderSwitch}>\n                <Typography variant=\"caption\" color=\"textSecondary\">{state.user?.from[0]}</Typography>\n                <IconButton\n                    onClick={() => setShowOrder(prevState => {\n                        const values = Object.values(CardShowOrder);\n                        return values[(values.indexOf(prevState) + 1) % 3]\n                    })}\n                >\n                    {showOrder === CardShowOrder.A_TO_B && <span className=\"material-icons\">arrow_right_alt</span>}\n                    {showOrder === CardShowOrder.B_TO_A && <span className=\"material-icons\" style={{ transform: 'rotate(180deg)' }}>arrow_right_alt</span>}\n                    {showOrder === CardShowOrder.RANDOM && <span className=\"material-icons\">swap_horiz</span>}\n                </IconButton>\n                <Typography variant=\"caption\" color=\"textSecondary\">{state.user?.to[0]}</Typography>\n            </div>\n\n            <SpeedDial\n                className={classes.speedDial}\n                ariaLabel=\"SpeedDial\"\n                hidden={false}\n                icon={<SpeedDialIcon/>}\n                onClose={() => setSpeedDialOpen(false)}\n                onOpen={() => setSpeedDialOpen(true)}\n                open={speedDialOpen}\n                direction=\"up\"\n            >\n                <SpeedDialAction\n                    icon={<span className=\"material-icons\">add</span>}\n                    tooltipTitle=\"Neu\"\n                    onClick={() => {\n                        setCardForEdit({\n                            translations: {\n                                from: state.user.from.reduce((r, e) => ({ ...r, [e]: '' }), {}),\n                                to: state.user.to.reduce((r, e) => ({ ...r, [e]: '' }), {})\n                            },\n                            example: ''\n                        });\n                        setSpeedDialOpen(false);\n                    }}\n                />\n                <SpeedDialAction\n                    icon={<span className=\"material-icons\">edit</span>}\n                    tooltipTitle=\"Bearbeiten\"\n                    onClick={() => {\n                        if (state.card) {\n                            setCardForEdit(state.card);\n                        }\n                        setSpeedDialOpen(false);\n                    }}\n                />\n                <SpeedDialAction\n                    icon={<span className=\"material-icons\">delete</span>}\n                    tooltipTitle=\"Löschen\"\n                    onClick={() => {\n                        if (state.card) {\n                            setStageDelete(true);\n                        }\n                        setSpeedDialOpen(false);\n                    }}\n                />\n            </SpeedDial>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}